---

title: Routing With Servers
date: 2018-08-10 05:43 UTC
tags: networking
author: Isaac Wallis
author_url: http://github.com/franknsten
summary: |
  This guide is an intruduction to delivering different content based on route requested
related_funcs:
  - start_web_server
  - next_web_request
  - send_file_response
  - is_get_requet_for
---

This article extends the skills gained from getting started with servers, specifically around serving different files for different paths

##Routing
Routing is an important part of the webservers job. This is how you get different pages depending on your requests for login, home, or about, pages on a site. Basically, a URL is structured [serverName]:[port]/[route], for example localhost:8080/login

###Recap of servers
Start with this code, which we built in the introduction guide

<%= snippet "server_basic", "articles/guides/server/basic/" %>

This has the following information we need:

* ```webServer```, the web server on port 8080 we will be working with
* ```newRequest```, the HTTP request that we're going to be sending responses to

###Preparing Pages
You should have an index.html file in ```Resources/server``` in your project folder, which we served to users last time. Create 3 copies, and name them login.html, about.html, contact.html. Edit the content inside the ```<p>``` tags to reflect the new names. You don't have to do anything too fancy, just add a message that identifies it as a different page. Your folder should now have the following files in it:

* index.html
* login.html
* about.html
* contact.html

###Checking Requests
Checking to see if a request has been made for a certain path is really easy! You just use ```is_get_request_for("path")``` where path is replaced by whatever you want to send resposnes for. This returns a boolean, True or False, which we can use an if statement to check

Delete the line containing ```send_html_file_response()```, and replace it with

```
if (is_get_request_for("login")){
	send_html_file_response(newRequest, "login.html");
}
```
This sends the html file "login.html" to the request stored in ```newRequest```


Compile and run your code, and navigate to ```localhost:8080/login``` in your browser. You should be met with the new message you added into login.html earlier on.

Try and add some in yourself, serve the relevant pages for paths "contact" and "about". Use an if/else if code block for this, because we're about to cover the default case of requesting a path that you haven't provided a response for

###Default Cases
You can only provide files to serve for so many pages, and you'll never cover every path people can try. This is why we use an if/else block while checking paths, so we can use an else{...} at the end

Usually, you'll want to send them to the homepage in these cases. This will simply be

```
else{
	send_html_file_response(newRequest, "index.html");
}
```

###Looping
You'll usually want your server to handle lots of requests, not just one then quit. The easiest way to do this is using a while loop that:

1. gets the next request
2. processes the request
3. sends an appropriate response

Then loops indefinetely

To achieve this, wrap the if statements in the following

```
while(true){
	//If statements here
}
```

We have to move the line to get the next request inside this loop, but leave the variable declaration outside it. 

Replace 

```
http_request newRequest = next_web_request(webServer);
```

with just 

```
http_request newRequest;
```

so that our program knows what he ```newRequest``` variable is, then add

```
newRequest = next_web_request(webServer);
```

immediately inside the while loop, right up the very top

###Links
To test this a but more efficiently, add links to ```index.html``` that link to the three pages. The general syntax for links is 

```
<a href="pathToLinkTo">Text to be clicked</a>
```

For example, a link to the login page would look like

```
<p>
	<a href="login">Login Page</a> <br />
</p>
```

Add links to contact and about to index.html in this same manner, then try playing around with ```localhost:8080``` in your browser of choice, checking out all the different pages
###Wrapping Up

Your code should now look like

Server:
<%= snippet "server_routes", "articles/guides/server/basic/" %>

Index.html:

<%= snippet "routing_index", "articles/guides/server/basic/" %>